/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  BigNumberish,
  Overrides,
} from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../common";
import type { Voting, VotingInterface } from "../Voting";

const _abi = [
  {
    inputs: [
      {
        internalType: "string[]",
        name: "_candidateNames",
        type: "string[]",
      },
      {
        internalType: "uint256",
        name: "_durationInMinutes",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "_name",
        type: "string",
      },
    ],
    name: "addCandidate",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "candidates",
    outputs: [
      {
        internalType: "string",
        name: "name",
        type: "string",
      },
      {
        internalType: "uint256",
        name: "voteCount",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getAllVotesOfCandidates",
    outputs: [
      {
        components: [
          {
            internalType: "string",
            name: "name",
            type: "string",
          },
          {
            internalType: "uint256",
            name: "voteCount",
            type: "uint256",
          },
        ],
        internalType: "struct Voting.Candidate[]",
        name: "",
        type: "tuple[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getRemainingTime",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getVotingStatus",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_candidateIndex",
        type: "uint256",
      },
    ],
    name: "vote",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "voters",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "votingEnd",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "votingStart",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60806040523480156200001157600080fd5b5060405162000ca138038062000ca18339810160408190526200003491620001f2565b60005b8251811015620000c7576000604051806040016040528085848151811062000063576200006362000345565b6020908102919091018101518252600091810182905283546001810185559382529081902082518051939460020290910192620000a4928492019062000103565b506020820151816001015550508080620000be9062000371565b91505062000037565b50600180546001600160a01b0319163317905542600355620000eb81603c6200038f565b620000f79042620003b1565b60045550620004099050565b8280546200011190620003cc565b90600052602060002090601f01602090048101928262000135576000855562000180565b82601f106200015057805160ff191683800117855562000180565b8280016001018555821562000180579182015b828111156200018057825182559160200191906001019062000163565b506200018e92915062000192565b5090565b5b808211156200018e576000815560010162000193565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b0381118282101715620001ea57620001ea620001a9565b604052919050565b60008060408084860312156200020757600080fd5b83516001600160401b03808211156200021f57600080fd5b8186019150601f87818401126200023557600080fd5b82516020838211156200024c576200024c620001a9565b8160051b6200025d828201620001bf565b928352858101820192828101908c8511156200027857600080fd5b83880192505b848310156200033057825187811115620002985760008081fd5b8801603f81018e13620002ab5760008081fd5b8481015188811115620002c257620002c2620001a9565b620002d5818901601f19168701620001bf565b8181528f8c838501011115620002eb5760008081fd5b60005b828110156200030b578381018d01518282018901528701620002ee565b828111156200031d5760008884840101525b508452505091830191908301906200027e565b9a90920151999b999a50505050505050505050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b60006000198214156200038857620003886200035b565b5060010190565b6000816000190483118215151615620003ac57620003ac6200035b565b500290565b60008219821115620003c757620003c76200035b565b500190565b600181811c90821680620003e157607f821691505b602082108114156200040357634e487b7160e01b600052602260045260246000fd5b50919050565b61088880620004196000396000f3fe608060405234801561001057600080fd5b50600436106100935760003560e01c8063581c281c11610066578063581c281c146100fd57806385a386351461011557806390a9ab901461011e578063a3ec138d14610133578063efb98bcf1461015657600080fd5b80630121b93f14610098578063101158af146100ad5780633477ee2e146100c9578063462e91ec146100ea575b600080fd5b6100ab6100a63660046105c4565b61015e565b005b6100b660035481565b6040519081526020015b60405180910390f35b6100dc6100d73660046105c4565b610267565b6040516100c092919061062a565b6100ab6100f8366004610662565b610323565b6101056103a5565b60405190151581526020016100c0565b6100b660045481565b6101266103bf565b6040516100c09190610713565b610105610141366004610789565b60026020526000908152604090205460ff1681565b6100b66104ba565b3360009081526002602052604090205460ff16156101c35760405162461bcd60e51b815260206004820152601760248201527f596f75206861766520616c726561647920766f7465642e00000000000000000060448201526064015b60405180910390fd5b60005481106102145760405162461bcd60e51b815260206004820152601860248201527f496e76616c69642063616e64696461746520696e6465782e000000000000000060448201526064016101ba565b60008181548110610227576102276107b9565b600091825260208220600160029092020101805491610245836107e5565b9091555050336000908152600260205260409020805460ff1916600117905550565b6000818154811061027757600080fd5b906000526020600020906002020160009150905080600001805461029a90610800565b80601f01602080910402602001604051908101604052809291908181526020018280546102c690610800565b80156103135780601f106102e857610100808354040283529160200191610313565b820191906000526020600020905b8154815290600101906020018083116102f657829003601f168201915b5050505050908060010154905082565b6001546001600160a01b0316331461033a57600080fd5b604080518082019091528181526000602080830182905281546001810183559180528251805160029093027f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e5630192610395928492019061052b565b5060208201518160010155505050565b600060035442101580156103ba575060045442105b905090565b60606000805480602002602001604051908101604052809291908181526020016000905b828210156104b1578382906000526020600020906002020160405180604001604052908160008201805461041690610800565b80601f016020809104026020016040519081016040528092919081815260200182805461044290610800565b801561048f5780601f106104645761010080835404028352916020019161048f565b820191906000526020600020905b81548152906001019060200180831161047257829003601f168201915b50505050508152602001600182015481525050815260200190600101906103e3565b50505050905090565b600060035442101561050e5760405162461bcd60e51b815260206004820152601b60248201527f566f74696e6720686173206e6f742073746172746564207965742e000000000060448201526064016101ba565b600454421061051d5750600090565b426004546103ba919061083b565b82805461053790610800565b90600052602060002090601f016020900481019282610559576000855561059f565b82601f1061057257805160ff191683800117855561059f565b8280016001018555821561059f579182015b8281111561059f578251825591602001919060010190610584565b506105ab9291506105af565b5090565b5b808211156105ab57600081556001016105b0565b6000602082840312156105d657600080fd5b5035919050565b6000815180845260005b81811015610603576020818501810151868301820152016105e7565b81811115610615576000602083870101525b50601f01601f19169290920160200192915050565b60408152600061063d60408301856105dd565b90508260208301529392505050565b634e487b7160e01b600052604160045260246000fd5b60006020828403121561067457600080fd5b813567ffffffffffffffff8082111561068c57600080fd5b818401915084601f8301126106a057600080fd5b8135818111156106b2576106b261064c565b604051601f8201601f19908116603f011681019083821181831017156106da576106da61064c565b816040528281528760208487010111156106f357600080fd5b826020860160208301376000928101602001929092525095945050505050565b60006020808301818452808551808352604092508286019150828160051b87010184880160005b8381101561077b57888303603f190185528151805187855261075e888601826105dd565b91890151948901949094529487019492509086019060010161073a565b509098975050505050505050565b60006020828403121561079b57600080fd5b81356001600160a01b03811681146107b257600080fd5b9392505050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b60006000198214156107f9576107f96107cf565b5060010190565b600181811c9082168061081457607f821691505b6020821081141561083557634e487b7160e01b600052602260045260246000fd5b50919050565b60008282101561084d5761084d6107cf565b50039056fea26469706673582212200323608fd1b2bf4a881a7991e2c81210c536fd8f5c05572d474bf180c20d6d1264736f6c63430008090033";

type VotingConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: VotingConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Voting__factory extends ContractFactory {
  constructor(...args: VotingConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _candidateNames: PromiseOrValue<string>[],
    _durationInMinutes: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<Voting> {
    return super.deploy(
      _candidateNames,
      _durationInMinutes,
      overrides || {}
    ) as Promise<Voting>;
  }
  override getDeployTransaction(
    _candidateNames: PromiseOrValue<string>[],
    _durationInMinutes: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      _candidateNames,
      _durationInMinutes,
      overrides || {}
    );
  }
  override attach(address: string): Voting {
    return super.attach(address) as Voting;
  }
  override connect(signer: Signer): Voting__factory {
    return super.connect(signer) as Voting__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): VotingInterface {
    return new utils.Interface(_abi) as VotingInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): Voting {
    return new Contract(address, _abi, signerOrProvider) as Voting;
  }
}
