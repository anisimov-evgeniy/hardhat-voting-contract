/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export declare namespace Voting {
  export type CandidateStruct = {
    name: PromiseOrValue<string>;
    voteCount: PromiseOrValue<BigNumberish>;
  };

  export type CandidateStructOutput = [string, BigNumber] & {
    name: string;
    voteCount: BigNumber;
  };
}

export interface VotingInterface extends utils.Interface {
  functions: {
    "addCandidate(string)": FunctionFragment;
    "candidates(uint256)": FunctionFragment;
    "getAllVotesOfCandiates()": FunctionFragment;
    "getRemainingTime()": FunctionFragment;
    "getVotingStatus()": FunctionFragment;
    "vote(uint256)": FunctionFragment;
    "voters(address)": FunctionFragment;
    "votingEnd()": FunctionFragment;
    "votingStart()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "addCandidate"
      | "candidates"
      | "getAllVotesOfCandiates"
      | "getRemainingTime"
      | "getVotingStatus"
      | "vote"
      | "voters"
      | "votingEnd"
      | "votingStart"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "addCandidate",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "candidates",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getAllVotesOfCandiates",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRemainingTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getVotingStatus",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "vote",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "voters",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "votingEnd", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "votingStart",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "addCandidate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "candidates", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAllVotesOfCandiates",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRemainingTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVotingStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "vote", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "voters", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "votingEnd", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "votingStart",
    data: BytesLike
  ): Result;

  events: {};
}

export interface Voting extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: VotingInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addCandidate(
      _name: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    candidates(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string, BigNumber] & { name: string; voteCount: BigNumber }>;

    getAllVotesOfCandiates(
      overrides?: CallOverrides
    ): Promise<[Voting.CandidateStructOutput[]]>;

    getRemainingTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    getVotingStatus(overrides?: CallOverrides): Promise<[boolean]>;

    vote(
      _candidateIndex: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    voters(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    votingEnd(overrides?: CallOverrides): Promise<[BigNumber]>;

    votingStart(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  addCandidate(
    _name: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  candidates(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<[string, BigNumber] & { name: string; voteCount: BigNumber }>;

  getAllVotesOfCandiates(
    overrides?: CallOverrides
  ): Promise<Voting.CandidateStructOutput[]>;

  getRemainingTime(overrides?: CallOverrides): Promise<BigNumber>;

  getVotingStatus(overrides?: CallOverrides): Promise<boolean>;

  vote(
    _candidateIndex: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  voters(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  votingEnd(overrides?: CallOverrides): Promise<BigNumber>;

  votingStart(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    addCandidate(
      _name: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    candidates(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string, BigNumber] & { name: string; voteCount: BigNumber }>;

    getAllVotesOfCandiates(
      overrides?: CallOverrides
    ): Promise<Voting.CandidateStructOutput[]>;

    getRemainingTime(overrides?: CallOverrides): Promise<BigNumber>;

    getVotingStatus(overrides?: CallOverrides): Promise<boolean>;

    vote(
      _candidateIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    voters(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    votingEnd(overrides?: CallOverrides): Promise<BigNumber>;

    votingStart(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    addCandidate(
      _name: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    candidates(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAllVotesOfCandiates(overrides?: CallOverrides): Promise<BigNumber>;

    getRemainingTime(overrides?: CallOverrides): Promise<BigNumber>;

    getVotingStatus(overrides?: CallOverrides): Promise<BigNumber>;

    vote(
      _candidateIndex: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    voters(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    votingEnd(overrides?: CallOverrides): Promise<BigNumber>;

    votingStart(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    addCandidate(
      _name: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    candidates(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAllVotesOfCandiates(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRemainingTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getVotingStatus(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    vote(
      _candidateIndex: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    voters(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    votingEnd(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    votingStart(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
